{"version":3,"sources":["App.js","accueil.js","reportWebVitals.js","index.js"],"names":["App","socket","Accueil","login","axios","get","withCredentials","headers","then","res","console","log","setState","views","data","sessionID","OTP","otp","socketIOClient","emit","on","response","message","catch","err","state","pictures","this","nextProps","nextState","style","display","flexDirection","justifyContent","alignItems","marginLeft","value","dateTime","map","element","src","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26647e61.chunk.js","sourcesContent":["//import logo from './logo.svg';\nimport './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport socketIOClient from \"socket.io-client\";\nimport QRCode from \"react-qr-code\";\nconst ENDPOINT = \"http://localhost:8011\";\nlet socket;\nfunction App() {\n  const [response, setResponse] = useState(\"\");\n  const [message, setMessage] = useState(null);\n  const [views, setViews] = useState(null);\n  const [sessionID, setSessionID] = useState(null);\n  const [OTP, setOTP] = useState(null);\n\n  const login = () => {\n    axios.get('http://localhost:3000/user/session', {\n      withCredentials: true  // <=========== important!\n    }).then((res) => {\n      console.log(res);\n      setViews(res.data.views);\n      setSessionID(res.data.sessionID);\n      setOTP(res.data.otp);\n\n      socket = socketIOClient(ENDPOINT);\n      socket.emit('sessionID', res.data.sessionID, 'web')\n      socket.on(\"FromAPI\", data => {\n        setResponse(data);\n      });\n\n      socket.on(\"message\", message => {\n        console.log(message);\n        setMessage(message)\n      });\n\n    }).catch((err) => {\n\n    })\n\n  }\n\n  /* const loadMessage = () =>{\n    socket.on(\"message\", message => {\n      console.log(message);\n      setMessage(message)\n    });\n  } */\n\n  useEffect(() => {\n    login();\n\n  }, );\n\n  /* useEffect(() => {\n    loadMessage()\n\n  }, [message]); */\n\n  /* const onclick = () => {\n    console.log('click');\n    socket.on(\"message\", message => {\n      console.log(message);\n      setMessage(message)\n    });\n  } */\n\n  return (\n    <div style={{\n      display: \"flex\",\n      flexDirection: 'column',\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    }}>\n\n      <div>\n        <h1 >Welcome!</h1>\n        <p></p>\n      </div>\n\n      {message === null ?\n        (<>\n          <p style={{ display: \"flex\", }}>views :<span style={{ marginLeft: 10 }} />\n            {views !== null ?\n              views :\n              null\n            }\n          </p>\n          <p style={{ display: \"flex\", }}>sessionID :<span style={{ marginLeft: 10 }} />\n            {sessionID !== null ?\n              sessionID :\n              null\n            }\n          </p>\n          <p style={{ display: \"flex\", }}>OTP :<span style={{ marginLeft: 10 }} />\n            {OTP !== null ?\n              OTP :\n              null\n            }\n          </p>\n          {OTP !== null ?\n            <QRCode value={OTP} /> :\n            null\n          }\n        </>\n        )\n        :\n        (<div>\n          <h1 >{message}</h1>\n          <p></p>\n        </div>)\n\n      }\n\n\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}><h1>It's</h1> <time style={{ marginLeft: 10 }} dateTime={response}>   {response}</time></div>\n\n\n      {/* <button onClick={onclick} >on click</button> */}\n\n    </div >\n  );\n}\n\n/* function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n} */\n\nexport default App;\n","import React, { Component } from 'react'\r\nimport './App.css';\r\nimport axios from 'axios';\r\nimport socketIOClient from \"socket.io-client\";\r\nimport QRCode from \"react-qr-code\";\r\nconst ENDPOINT = \"https://smart-scan-ooredoo.herokuapp.com\";\r\nlet socket;\r\nexport default class Accueil extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            response: '',\r\n            message: null,\r\n            views: null,\r\n            sessionID: null,\r\n            OTP: null,\r\n            pictures: null\r\n        }\r\n\r\n    }\r\n\r\n    login = () => {\r\n        var config = {\r\n            withCredentials: true,\r\n            headers: {\r\n                'User-Agent': 'Axios 0.21.1',\r\n                'Accept': '*/*'\r\n            }\r\n        }\r\n        axios.get('https://smart-scan-ooredoo.herokuapp.com/user/session', config)\r\n            .then((res) => {\r\n                console.log(res);\r\n                this.setState({ views: res.data.views })\r\n                this.setState({ sessionID: res.data.sessionID })\r\n                this.setState({ OTP: res.data.otp })\r\n\r\n                socket = socketIOClient(ENDPOINT);\r\n                socket.emit('sessionID', res.data.sessionID, 'web')\r\n                socket.on(\"FromAPI\", data => {\r\n                    this.setState({ response: data })\r\n                });\r\n\r\n                socket.on(\"message\", message => {\r\n                    console.log(message);\r\n                    this.setState({ message: message })\r\n                });\r\n\r\n            }).catch((err) => {\r\n\r\n            })\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.login();\r\n    }\r\n\r\n    UNSAFE_componentWillUpdate(nextProps, nextState) {\r\n        if (this.state.message === null && nextState.message !== null) {\r\n            socket.on(\"message\", message => {\r\n                console.log(message);\r\n                this.setState({ message: message, pictures: null });\r\n                //window.location.reload();\r\n            });\r\n\r\n        }\r\n\r\n        if (this.state.message !== null && this.state.pictures === null && nextState.pictures === null) {\r\n            socket.on(\"receive picture\", pictures => {\r\n                console.log(pictures);\r\n                this.setState({ pictures });\r\n\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const { response, message, views, sessionID, OTP } = this.state;\r\n        return (\r\n            <div style={{\r\n                display: \"flex\",\r\n                flexDirection: 'column',\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\"\r\n            }}>\r\n\r\n                <div>\r\n                    <h1 >Welcome!</h1>\r\n                    <p></p>\r\n                </div>\r\n\r\n                {message === null ?\r\n                    (<>\r\n                        <p style={{ display: \"flex\", }}>views :<span style={{ marginLeft: 10 }} />\r\n                            {views !== null ?\r\n                                views :\r\n                                null\r\n                            }\r\n                        </p>\r\n                        <p style={{ display: \"flex\", }}>sessionID :<span style={{ marginLeft: 10 }} />\r\n                            {sessionID !== null ?\r\n                                sessionID :\r\n                                null\r\n                            }\r\n                        </p>\r\n                        <p style={{ display: \"flex\", }}>OTP :<span style={{ marginLeft: 10 }} />\r\n                            {OTP !== null ?\r\n                                OTP :\r\n                                null\r\n                            }\r\n                        </p>\r\n                        {OTP !== null ?\r\n                            <QRCode value={OTP} /> :\r\n                            null\r\n                        }\r\n                    </>\r\n                    )\r\n                    :\r\n                    (<div>\r\n                        <h1 >{message}</h1>\r\n                        <p></p>\r\n                    </div>)\r\n\r\n                }\r\n\r\n\r\n                <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}><h1>It's</h1> <time style={{ marginLeft: 10 }} dateTime={response}>   {response}</time></div>\r\n\r\n\r\n                {this.state.pictures === null || message === null ?\r\n                    null\r\n                    :\r\n                    <>\r\n\r\n                        {this.state.pictures.map((element) => {\r\n\r\n                            return (\r\n                                <img src={`data:image/jpeg;base64,${element.data}`} />\r\n                            )\r\n\r\n\r\n                        })}\r\n                    </>\r\n                }\r\n                {/* <button onClick={onclick} >on click</button> */}\r\n\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Accueil from './accueil';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Accueil />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}